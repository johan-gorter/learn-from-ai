@model (int CourseId, int? CurrentSubjectId, int? CurrentExerciseId)

<h2 class="text-xl font-bold mb-4 text-primary">Course Outline</h2>
<div id="courseOutline" class="space-y-2">
    @for (int i = 0; i < 5; i++)
    {
        <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-2 py-1">
                <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const courseId = @Model.CourseId;
        const currentSubjectId = @(Model.CurrentSubjectId ?? -1);
        const currentExerciseId = @(Model.CurrentExerciseId ?? -1);

        fetch(`/api/Courses/${courseId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(course => {
                const outlineHtml = renderCourseOutline(course, currentSubjectId, currentExerciseId);
                document.getElementById('courseOutline').innerHTML = outlineHtml;
                setupNavigation(course, currentSubjectId, currentExerciseId);
            })
            .catch(error => {
                console.error('Error fetching course outline:', error);
                document.getElementById('courseOutline').innerHTML = '<p class="text-red-500">Error loading course outline. Please try again later.</p>';
            });
    });

    function renderCourseOutline(course, currentSubjectId, currentExerciseId) {
        let html = '<ul class="space-y-2">';
        course.subjects.forEach(subject => {
            const isActiveSubject = subject.id === currentSubjectId;
            html += `
                <li>
                    <a href="/Subject/${subject.id}" class="${isActiveSubject ? 'font-bold' : ''} hover:text-primary">
                        ${subject.headline}
                    </a>
                    ${renderExercises(subject.exercises, currentExerciseId, isActiveSubject)}
                </li>
            `;
        });
        html += '</ul>';
        return html;
    }

    function renderExercises(exercises, currentExerciseId, isActiveSubject) {
        if (!exercises || exercises.length === 0) return '';

        let html = '<ul class="ml-4 mt-1 space-y-1">';
        exercises.forEach(exercise => {
            const isActiveExercise = exercise.id === currentExerciseId;
            html += `
                <li>
                    <a href="/Exercise/${exercise.id}" class="${isActiveExercise ? 'font-bold' : ''} hover:text-primary">
                        ${exercise.headline}
                    </a>
                </li>
            `;
        });
        html += '</ul>';
        return html;
    }

    function setupNavigation(course, currentSubjectId, currentExerciseId) {
        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');

        let currentIndex = -1;
        let items = [];

        // Flatten the course structure into a single array of navigable items
        course.subjects.forEach(subject => {
            items.push({ type: 'subject', id: subject.id });
            subject.exercises.forEach(exercise => {
                items.push({ type: 'exercise', id: exercise.id });
            });
        });

        // Find the current position
        currentIndex = items.findIndex(item =>
            (item.type === 'subject' && item.id === currentSubjectId) ||
            (item.type === 'exercise' && item.id === currentExerciseId)
        );

        if (currentIndex > 0) {
            const prevItem = items[currentIndex - 1];
            prevButton.href = prevItem.type === 'subject' ? `/Subject/${prevItem.id}` : `/Exercise/${prevItem.id}`;
            prevButton.classList.remove('invisible');
        }

        if (currentIndex < items.length - 1) {
            const nextItem = items[currentIndex + 1];
            nextButton.href = nextItem.type === 'subject' ? `/Subject/${nextItem.id}` : `/Exercise/${nextItem.id}`;
            nextButton.classList.remove('invisible');
        }
    }
</script>
