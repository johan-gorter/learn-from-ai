@page "{id:int}"
@model LearnFromAI.Web.Pages.ExerciseModel
@using HtmlAgilityPack
@{
  ViewData["Title"] = $"{Model.Exercise.Headline} - {Model.Course.Title}";
  var htmlDoc = new HtmlDocument();
  htmlDoc.LoadHtml(Model.Exercise.Content);
}

<div class="flex flex-col md:flex-row gap-8">
  <aside class="md:w-1/4 bg-white p-4 rounded shadow">
    <partial name="_CourseOutline" model="(Model.Course.Id, (int?)Model.Subject.Id, (int?)Model.Exercise.Id)" />
  </aside>

  <section class="md:w-3/4 space-y-8">
    <div class="bg-white p-6 rounded shadow">
      <h2 class="text-2xl font-bold mb-4 text-primary">@Model.Exercise.Headline</h2>
      <div class="prose max-w-none">
        @Html.Raw(htmlDoc.DocumentNode.SelectSingleNode("//main")?.InnerHtml)
      </div>
      <button id="hintBtn" class="mt-4 bg-accent hover:bg-yellow-600 px-4 py-2 rounded">Show Hint</button>
    </div>

    <div class="bg-white p-6 rounded shadow">
      <h3 class="text-xl font-bold mb-4 text-primary">Playground</h3>
      <textarea id="codeEditor" rows="10" class="w-full p-2 border border-gray-300 rounded font-mono"
        placeholder="Write your code here...">@htmlDoc.DocumentNode.SelectSingleNode("//textarea")?.InnerText</textarea>
      <div class="mt-4 flex justify-between">
        <button id="runBtn" class="bg-green-500 hover:bg-green-600 px-4 py-2 rounded text-white">Run Code</button>
        <button id="resetBtn" class="bg-gray-500 hover:bg-gray-600 px-4 py-2 rounded text-white">Reset</button>
      </div>
    </div>

    <div class="bg-white p-6 rounded shadow">
      <h3 class="text-xl font-bold mb-4 text-primary">Console Output</h3>
      <pre id="consoleOutput" class="bg-gray-100 p-4 rounded font-mono min-h-[100px]"></pre>
    </div>
  </section>
</div>

<div id="hintDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
  <div class="bg-white p-6 rounded shadow-lg max-w-md w-full">
    <h3 class="text-2xl font-bold mb-4 text-primary">Hint</h3>
    <div id="hintContent" class="mb-4 prose prose-sm max-w-none">
      @Html.Raw(htmlDoc.DocumentNode.SelectSingleNode("//dialog")?.InnerHtml)
    </div>
    <div class="flex justify-between">
      <button id="closeHintBtn" class="mt-4 bg-secondary hover:bg-red-600 px-4 py-2 rounded text-white font-semibold">Close</button>
      <button id="revealSolutionBtn" class="mt-4 bg-blue-500 hover:bg-blue-600 px-4 py-2 rounded text-white font-semibold">Reveal Solution</button>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    const hintBtn = document.getElementById('hintBtn');
    const hintDialog = document.getElementById('hintDialog');
    const closeHintBtn = document.getElementById('closeHintBtn');
    const revealSolutionBtn = document.getElementById('revealSolutionBtn');
    const runBtn = document.getElementById('runBtn');
    const resetBtn = document.getElementById('resetBtn');
    const codeEditor = document.getElementById('codeEditor');
    const consoleOutput = document.getElementById('consoleOutput');
    const hintContent = document.getElementById('hintContent');

    const initialCode = @Html.Raw(Json.Serialize(htmlDoc.DocumentNode.SelectSingleNode("//textarea")?.InnerText));
    const solution = @Html.Raw(Json.Serialize(htmlDoc.DocumentNode.SelectNodes("//textarea")[1]?.InnerText));
    const testCases = @Html.Raw(Json.Serialize(htmlDoc.DocumentNode.SelectNodes("//textarea")[2]?.InnerText));

    hintBtn.addEventListener('click', () => {
      hintDialog.classList.remove('hidden');
    });

    closeHintBtn.addEventListener('click', () => {
      hintDialog.classList.add('hidden');
    });

    revealSolutionBtn.addEventListener('click', () => {
      hintDialog.classList.add('hidden');
      codeEditor.value = solution;
    });

    runBtn.addEventListener('click', () => {
      const code = codeEditor.value;
      let output = '';
      const originalConsoleLog = console.log;
      console.log = (...args) => {
        output += args.join(' ') + '\n';
      };
      try {
        eval(code);
      } catch (error) {
        output = 'Error: ' + error.message;
      }
      console.log = originalConsoleLog;
      consoleOutput.textContent = output;

      // Here you can add logic to run test cases and provide feedback
    });

    resetBtn.addEventListener('click', () => {
      codeEditor.value = initialCode;
      consoleOutput.textContent = '';
    });

    // Initialize the code editor with the initial code
    codeEditor.value = initialCode;
  </script>
}
