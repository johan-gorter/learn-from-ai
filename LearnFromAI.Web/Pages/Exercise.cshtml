@page "{id:int}"
@model LearnFromAI.Web.Pages.ExerciseModel
@{
    ViewData["Title"] = $"{Model.Course.Title} - {Model.Exercise.Headline}";
}

<div class="flex flex-col md:flex-row gap-8">
    <aside class="md:w-1/4 bg-white p-4 rounded shadow">
        <partial name="_TableOfContents" model="((int?)Model.Course.Id, (int?)Model.Subject.Id, (int?)Model.Exercise.Id)" />
    </aside>

    <section class="md:w-3/4 space-y-8">
        <div class="bg-white p-6 rounded shadow">
            <h2 class="text-2xl font-bold mb-4 text-primary">@Model.Exercise.Headline</h2>
            <div class="prose max-w-none" id="exerciseContent">
                @* Content will be dynamically inserted here *@
            </div>
        </div>

        <div class="bg-white p-6 rounded shadow">
            <h3 class="text-xl font-bold mb-4 text-primary">Playground</h3>
            <textarea id="codeEditor" rows="10" class="w-full p-2 border border-gray-300 rounded font-mono"
                placeholder="Write your code here..."></textarea>
            <div class="mt-4 flex justify-between">
                <button id="runBtn" class="bg-green-500 hover:bg-green-600 px-4 py-2 rounded text-white">Run Code</button>
                <button id="resetBtn" class="bg-gray-500 hover:bg-gray-600 px-4 py-2 rounded text-white">Reset</button>
                <button id="hintBtn" class="bg-accent hover:bg-yellow-600 px-4 py-2 rounded">Show Hint</button>
            </div>
        </div>

        <div class="bg-white p-6 rounded shadow">
            <h3 class="text-xl font-bold mb-4 text-primary">Console Output</h3>
            <pre id="consoleOutput" class="bg-gray-100 p-4 rounded font-mono min-h-[100px]"></pre>
        </div>
    </section>
</div>

<div class="mt-8 flex justify-between">
  <button id="prevButton" class="bg-secondary hover:bg-red-600 px-4 py-2 rounded text-white invisible">Previous</button>
  <button id="nextButton" class="bg-secondary hover:bg-red-600 px-4 py-2 rounded text-white invisible">Next</button>
</div>

<dialog id="hintDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-6 rounded shadow-lg max-w-md">
        <h3 class="text-xl font-bold mb-4 text-primary">Hint</h3>
        <div id="hintContent" class="mb-4"></div>
        <div class="flex justify-between">
            <button id="closeHintBtn"
                class="bg-secondary hover:bg-red-600 px-4 py-2 rounded text-white">Close</button>
            <button id="revealSolutionBtn"
                class="bg-accent hover:bg-yellow-600 px-4 py-2 rounded">Reveal Solution</button>
        </div>
    </div>
</dialog>

@section Scripts {
    <script>
        const exerciseContent = @Html.Raw(Json.Serialize(Model.Exercise.Content));
        const exerciseContentElement = document.getElementById('exerciseContent');
        const hintBtn = document.getElementById('hintBtn');
        const hintDialog = document.getElementById('hintDialog');
        const closeHintBtn = document.getElementById('closeHintBtn');
        const runBtn = document.getElementById('runBtn');
        const resetBtn = document.getElementById('resetBtn');
        const codeEditor = document.getElementById('codeEditor');
        const consoleOutput = document.getElementById('consoleOutput');
        const hintContent = document.getElementById('hintContent');
        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');

        // Parse the exercise content
        const parser = new DOMParser();
        const doc = parser.parseFromString(exerciseContent, 'text/html');

        // Render main content
        const mainContent = doc.querySelector('main');
        if (mainContent) {
            exerciseContentElement.innerHTML = mainContent.innerHTML;
        }

        // Set up playground
        const playground = doc.querySelector('#playground');
        if (playground) {
            codeEditor.value = playground.textContent.trim();
        }

        // Set up hint
        const hint = doc.querySelector('#hint');
        if (hint) {
            hintContent.innerHTML = hint.innerHTML;
        }

        // Set up solution (hidden for now, you might want to add a "Show Solution" button later)
        const solution = doc.querySelector('#solution');
        let solutionCode = '';
        if (solution) {
            solutionCode = solution.textContent.trim();
        }

        hintBtn.addEventListener('click', () => {
            hintDialog.classList.remove('hidden');
        });

        closeHintBtn.addEventListener('click', () => {
            hintDialog.classList.add('hidden');
        });

        runBtn.addEventListener('click', () => {
            const code = codeEditor.value;
            let output = '';
            const originalConsoleLog = console.log;
            console.log = (...args) => {
                output += args.join(' ') + '\n';
            };
            try {
                eval(code);
            } catch (error) {
                output = 'Error: ' + error.message;
            }
            console.log = originalConsoleLog;
            consoleOutput.textContent = output;
        });

        resetBtn.addEventListener('click', () => {
            codeEditor.value = playground ? playground.textContent.trim() : '';
            consoleOutput.textContent = '';
        });

        const revealSolutionBtn = document.getElementById('revealSolutionBtn');

        revealSolutionBtn.addEventListener('click', () => {
            codeEditor.value = solutionCode;
            hintDialog.classList.add('hidden');
        });

        // TODO: Add logic to show/hide buttons and set their href attributes based on the current exercise's position in the subject
    </script>
}
