@page "{id:int}"
@using HtmlAgilityPack
@model LearnFromAI.Web.Pages.ExerciseModel
@inject LearnFromAI.Web.Services.ICourseService CourseService
@{
    ViewData["Title"] = $"Exercise: {Model.Exercise.Headline}";
    var content = new HtmlDocument();
    content.LoadHtml(Model.Exercise.Content);
}

<div class="flex flex-col md:flex-row gap-8">
    <aside class="md:w-1/4 bg-white p-4 rounded shadow">
        @await Html.PartialAsync("_TableOfContents", (Model.Exercise.Subject.CourseId, (int?)Model.Exercise.SubjectId, (int?)Model.Exercise.Id))
    </aside>

    <section class="md:w-3/4 space-y-8">
        <div class="bg-white p-6 rounded shadow">
            <h2 class="text-2xl font-bold mb-4 text-primary">@Model.Exercise.Headline</h2>
            <div class="prose max-w-none">
                @Html.Raw(content.DocumentNode.SelectSingleNode("//main").InnerHtml)
            </div>
            <button id="hintBtn" class="mt-4 bg-accent hover:bg-yellow-600 px-4 py-2 rounded">Show Hint</button>
        </div>

        <div class="bg-white p-6 rounded shadow">
            <h3 class="text-xl font-bold mb-4 text-primary">Playground</h3>
            <textarea id="codeEditor" rows="10" class="w-full p-2 border border-gray-300 rounded font-mono" placeholder="Write your code here...">@content.DocumentNode.SelectSingleNode("//textarea[@id='playground']").InnerText.Trim()</textarea>
            <div class="mt-4 flex justify-between">
                <button id="runBtn" class="bg-green-500 hover:bg-green-600 px-4 py-2 rounded text-white">Run Code</button>
                <button id="resetBtn" class="bg-gray-500 hover:bg-gray-600 px-4 py-2 rounded text-white">Reset</button>
            </div>
        </div>

        <div class="bg-white p-6 rounded shadow">
            <h3 class="text-xl font-bold mb-4 text-primary">Console Output</h3>
            <pre id="consoleOutput" class="bg-gray-100 p-4 rounded font-mono min-h-[100px]"></pre>
        </div>
    </section>
</div>

<div id="hintDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-6 rounded shadow-lg max-w-md w-full">
        <h3 class="text-xl font-bold mb-4 text-primary">Hint</h3>
        <div id="hintContent" class="mb-4 prose max-w-none">@Html.Raw(content.DocumentNode.SelectSingleNode("//dialog[@id='hint']").InnerHtml)</div>
        <div class="flex justify-between">
            <button id="closeHintBtn" class="mt-4 bg-secondary hover:bg-red-600 px-4 py-2 rounded text-white">Close</button>
            <button id="revealSolutionBtn" class="mt-4 bg-accent hover:bg-yellow-600 px-4 py-2 rounded">Reveal Solution</button>
        </div>
    </div>
</div>

@section Footer {
    <footer class="fixed bottom-0 left-0 right-0 bg-primary text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <div>
                <a id="prevBtn" class="bg-secondary hover:bg-red-600 px-4 py-2 rounded">Previous</a>
            </div>
            <div class="ml-auto">
                <a id="nextBtn" class="bg-secondary hover:bg-red-600 px-4 py-2 rounded">Next</a>
            </div>
        </div>
    </footer>
}

@section Scripts {
    <script>
        const hintBtn = document.getElementById('hintBtn');
        const hintDialog = document.getElementById('hintDialog');
        const closeHintBtn = document.getElementById('closeHintBtn');
        const revealSolutionBtn = document.getElementById('revealSolutionBtn');
        const runBtn = document.getElementById('runBtn');
        const resetBtn = document.getElementById('resetBtn');
        const codeEditor = document.getElementById('codeEditor');
        const consoleOutput = document.getElementById('consoleOutput');
        const hintContent = document.getElementById('hintContent');

        const initialCode = @Json.Serialize(content.DocumentNode.SelectSingleNode("//textarea[@id='playground']").InnerText.Trim());
        const solution = @Json.Serialize(content.DocumentNode.SelectSingleNode("//textarea[@id='solution']").InnerText.Trim());

        hintBtn.addEventListener('click', () => {
            hintDialog.classList.remove('hidden');
        });

        closeHintBtn.addEventListener('click', () => {
            hintDialog.classList.add('hidden');
        });

        revealSolutionBtn.addEventListener('click', () => {
            codeEditor.value = solution;
            hintDialog.classList.add('hidden');
        });

        runBtn.addEventListener('click', () => {
            const code = codeEditor.value;
            let output = '';
            const originalConsoleLog = console.log;
            console.log = (...args) => {
                output += args.join(' ') + '\n';
            };
            try {
                eval(code);
            } catch (error) {
                output = 'Error: ' + error.message;
            }
            console.log = originalConsoleLog;
            consoleOutput.textContent = output;
        });

        resetBtn.addEventListener('click', () => {
            codeEditor.value = initialCode;
            consoleOutput.textContent = '';
        });

        // Add this at the end of the script section
        document.addEventListener('DOMContentLoaded', function () {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');

            prevBtn.addEventListener('click', (e) => {
                if (prevBtn.disabled) {
                    e.preventDefault();
                }
            });

            nextBtn.addEventListener('click', (e) => {
                if (nextBtn.disabled) {
                    e.preventDefault();
                }
            });
        });
    </script>
}
